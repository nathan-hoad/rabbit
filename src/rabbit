#!/usr/bin/python
"""
File rabbit.py
Author: Nathan Hoad <nathan@getoffmalawn.com>
Description: Short sweet bug tracker similar(ish) to git.
Original Date Written: 30th June 2010
"""
import sys
import getopt
import time
import sqlite3
import os.path

_version = "0.5.0"
_default_name = '.rabbit'

# super sweet lambda functions
prettify = lambda text, max_length: text[:max_length - 3]\
    .replace("\n", '') + "..." if len(text) > max_length \
    else text.replace("\n", "")
split_length = lambda text, length: [text[i:i + length] \
    for i in range(0, len(text), length)]

# Using this template ensures no fields will be missed
NewIssue = {'type': 'unknown',
            'status': 'open',
            'priority': 'medium',
            'summary': '',
            'date': time.strftime("%Y-%m-%d"),
            'description': ''}

_create_issue_statement = "create table Issue(id INTEGER PRIMARY KEY, "\
                        + " type varchar(500),"\
                        + " date varchar(10),"\
                        + " status varchar(500),"\
                        + " priority varchar(500),"\
                        + " summary varchar(500),"\
                        + " description varchar(5000))"

_create_comment_statement = "create table Comment("\
                          + "id INTEGER PRIMARY KEY,"\
                          + "issueID INTEGER,"\
                          + "description varchar(500))"\

_insert_issue_statement = "insert into Issue(type, date, status, priority,"\
                        + "summary, description) values(\"%(type)s\","\
                        + " '%(date)s', \"%(status)s\", \"%(priority)s\","\
                        + " \"%(summary)s\", \"%(description)s\")"


class BugTracker():
    """BugTracker class providing an interface to the SQLite"""

    def __init__(self, filename):
        self.term_width = int(os.popen('stty size', 'r').read().split()[1])

        if self.term_width < 80:
            print("WARNING: Your terminal is less than 80 characters wide.")
            print("This is fine and all, but the formatting may be a bit ugly.")

        self.minimum_width = 75

        if not os.path.isfile(filename) and self._actions():
            self._create_database(filename)
        else:
            self.conn = sqlite3.connect(filename)

    def _actions(self):
        if len(sys.argv) > 1 and sys.argv[1] in ("add", "comment"):
            return True

        print("No rabbit repository exists in this directory")
        usage()
        sys.exit(0)

    def _create_database(self, filename):
        """Creates the database."""
        self.conn = sqlite3.connect(filename)
        self.conn.execute(_create_issue_statement)
        self.conn.execute(_create_comment_statement)
        print("empty database was created in {0}".format(filename))

    def add(self):
        """Add a new issue to the database.

        This method grabs all the necessary data from sys.argv[2:]."""
        new_issue = self._parse(sys.argv[2:], False)
        self.conn.execute(_insert_issue_statement % new_issue)
        self.conn.commit()
        print("New issue was added")

    def open(self, issue_ids):

        # this maps the new values to columns using the key name
        for i_id in issue_ids:
            test_number(i_id)
            statement = "update Issue set status='open' where id = {0}".format(i_id)

            self.conn.execute(statement)
        self.conn.commit()
        print ("IDs {0} were opened".format(", ".join([x for x in issue_ids])))

    def close(self, issue_ids):

        # this maps the new values to columns using the key name
        for i_id in issue_ids:
            test_number(i_id)
            statement = "update Issue set status='closed' where id = {0}".format(i_id)

            self.conn.execute(statement)
        self.conn.commit()
        print ("IDs {0} were closed".format(", ".join([x for x in issue_ids])))

    def update(self, issue_id, list):
        """Update an issue in the database.

        Keyword arguments:
        issue_id -- integer value for the id you want to delete.
        list -- List of command line arguments. Should always be argv[3:].

        """
        if not list:
            print("Nothing to be done for", issue_id)
            return

        test_number(issue_id)

        new_issue = self._parse(list, True)

        # this maps the new values to columns using the key name
        statement = "update Issue set " + ",\n".join(["%s = '%s'" % (k, v)
                                for k, v in new_issue.items()]) \
                                    + " where id = %d" % int(issue_id)

        self.conn.execute(statement)
        self.conn.commit()

    def remove(self, issue_id):
        """Remote an issue completely from the database.

        Keyword arguments:
        issue_id -- integer value for the id you want to delete.
        """
        test_number(issue_id)
        self.conn.execute("delete from Issue where id = %d" % int(issue_id))
        self.conn.execute("delete from Comment where issueID = %d"\
            % int(issue_id))
        self.conn.commit()

    def _print_row(self, row):
        """Display a row with nice output.

        Keyword arguments:
        row -- row from an executed SQLite statement.
        """

        term_width = self.term_width

        if len(row) == 7:
            id = row[0] # fixed width, no point prettifying
            type = prettify(row[1], 7)
            date = row[2] # fixed width, no point prettifying
            status = prettify(row[3], 6)
            priority = prettify(row[4], 8)
            summary = prettify(row[5], self.term_width - self.minimum_width + 18)

            base_layout = "| {0:2} | {1:7} | {2} | {3:6} | {4:8} |"\
                .format(id, type, date, status, priority, summary)
            base_percent = len(base_layout) / float(term_width)

            term_width = self.term_width + 18
            layout = "| {0:2} | {1:7} | {2} | {3:6} | {4:8} | {5:%d} |" % (term_width - self.minimum_width)

            print(layout.format(id, type, date, status, priority, summary))
        else:
            print("| {0:2} | {1:70} |".format(row[0], prettify(row[1], 70)))

    def display(self, type="issue", id=None):
        """Display all issues or comments in the system in various formats.

        Keyword arguments:
        type -- Should be one of either "issue" or "comment" or if you want
        to filter types based on status, use that. E.g. closed will show all closed issues.
        id -- The id of the comment or issue to display.
              Does not apply when type is "issue"
              If this is set to none, it will be grabbed from sys.argv[3]
        """

        if id is not None:
            test_number(id)

        query = "select id, type, date, status, priority, summary, "\
            + "description from Issue"

        if type not in ('issue', 'comment'):
            query += ' where status = "{0}"'.format(type)

        terminal_width = self.term_width
        header = "| {0:2} | {1:7} | {2:10} | {3} | {4} | {5:%d} |" \
                        % (terminal_width - self.minimum_width + 18)

        header = header.format("id", "type", "date", "status", \
                        "priority", "summary")

        if type == "comment":
            query = "select id, description from Comment where issueID = %d" \
                % int(id)
            header = "| {0:2} | {1:70} |".format("id", "description")
        cursor = self.conn.cursor()
        cursor.execute(query)
        nice_bars = "".join(['*' for i in range(len(header))])

        print(nice_bars)
        print(header)
        print(nice_bars)

        if type == "issue": # display all issues
            for row in cursor:
                self._print_row(row)
        else: # display all comments
            for row in cursor:
                self._print_row(row)

        print(nice_bars)

    def detail(self, issue_id):
        """Print a detailed overview of an issue.

        Keyword arguments:
        issue_id -- id of the issue to be displayed
        """
        test_number(issue_id)

        query = "select id, type, date, status, priority, summary, "\
              + "description from Issue "\
              + "where id = %d" % int(issue_id)

        cursor = self.conn.cursor()
        cursor.execute(query)
        row = cursor.fetchone()

        print("Issue ID:", row[0])
        print("Type:", row[1])
        print("Date:", row[2])
        print("Status:", row[3])
        print("Priority:", row[4])
        print("Summary:", row[5])

        # span description if it's too long
        print("Description:", "\n             ".join(split_length(row[6], 70)))
        print()

        self.display("comment", row[0])

    def comment(self, id, comment):
        """Add a coment to an issue.

        Keyword arguments:
        id -- the issue id to you want to comment on.
        comment - the text you wish to add.
        """
        statement = "insert into Comment(issueID, description)"\
            + " values(%d, '%s')" % (int(id), " ".join(comment))
        self.conn.execute(statement)
        self.conn.commit()

    def _parse(self, argv, use_blank=False):
        """Parse a list of arguments and return a map. Called by update()

        Keyword arguments:
        argv -- list of arguments to parse. This should be sys.argv[3:]
        use_blank -- if True: use empty map.
                     else: NewIssue will be used.
        """
        new_issue = {} if use_blank else NewIssue
        opts, args = getopt.getopt(argv, "t:s:p:d:b:", \
            ["type=", "status=", "priority=", "description=", "summary="])

        for opt, arg in opts:
            if opt in ("-t", "--type"):
                new_issue['type'] = arg
            if opt in ("-s", "--status"):
                new_issue['status'] = arg
            if opt in ("-p", "--priority"):
                new_issue['priority'] = arg
            if opt in ("-d", "--description"):
                new_issue['description'] = arg
            if opt in ("-b", "--summary"):
                new_issue['summary'] = arg

        return new_issue


def test_number(id):
    """Test if id is a number and quit if it is.

    Keyword arguments:
    id -- the object to test
    """
    try:
        int(id)
    except ValueError:
        print("The issue ID MUST be an integer!")
        sys.exit(1)


def usage(specifier=None):
    """Display usage for the program.

    A specifier can be used to display help for a specific command, e.g. "add"

    """
    if specifier is None:
        print("Usage:", sys.argv[0], "[COMMAND] [OPTION]..."\
            + "\nExample:", sys.argv[0], "add --summary 'Segfault on "\
            + "program start' --priority high"\
            + "\nCommands:"\
            + "\n  add         Add a new issue"\
            + "\n  list        List all issues"\
            + "\n  detail      Print detailed into about an issue"\
            + "\n  comment     Add a comment to an issue"\
            + "\n  rm          Remove an issue"\
            + "\n  update      Modify an issue"\
            + "\n  close       Close an issue"\
            + "\n  open        Re-Open an issue"\
            + "\n\nPlease note that you get help at any time for the above "\
            + "commands with", sys.argv[0], "help [COMMAND]")
        return

    specifier = specifier.lower()

    if specifier == "add":
        print("Usage:", sys.argv[0], "add [OPTION]"\
            + "\nExample:", sys.argv[0], "add --summary 'Segfault on "\
            + "program start' --priority high"\
            + "\nOptions:"\
            + "\n  -d, --description=DESCRIPTION  large description of the issue"\
            + "\n  -t --type=TYPE                 problem type, e.g enhancement, bug"\
            + "\n  -s, --status=STATUS            status of the problem, e.g. fixed"\
            + "\n  -p, --priority=PRIORITY        it's priority, e.g. high or medium"\
            + "\n  -b, --summary=SUMMARY          brief overview of the issue")
    elif specifier == "detail":
        print("Usage:", sys.argv[0], "detail [ISSUEID]")
        print("Example:", sys.argv[0], "detail 6")
    elif specifier == "rm":
        print("Usage:", sys.argv[0], "rm [ISSUEID]")
        print("Example:", sys.argv[0], "rm 1")
    elif specifier == "list":
        print("Usage:", sys.argv[0], "list [TYPE] [ID] [OPTION]")
        print("\nTYPE may be either comment or issue")
        print("Example:", sys.argv[0], "list comment 5")
    elif specifier == "open":
        print("Usage:", sys.argv[0], "open [ISSUEID]")
        print("Example:", sys.argv[0], "open 1")
    elif specifier == "close":
        print("Usage:", sys.argv[0], "close [ISSUEID]")
        print("Example:", sys.argv[0], "close 1")
    elif specifier == "comment":
        print("Usage:", sys.argv[0], "comment [ISSUEID] [TEXT]")
        print("Example:", sys.argv[0], "comment 1 Can't get it to reproduce")
    elif specifier == "update":
        print("Usage:", sys.argv[0], "update [TYPE] [ISSUEID] [OPTION]..."\
            + "\nExample:", sys.argv[0], "update 1--summary 'Segfault on "\
            + "program start' --priority high"\
            + "\nOptions:"\
            + "\n  -d, --description=DESCRIPTION  large description of the issue"\
            + "\n  -t --type=TYPE                 problem type, e.g enhancement, bug"\
            + "\n  -s, --status=STATUS            status of the problem, e.g. fixed"\
            + "\n  -p, --priority=PRIORITY        it's priority, e.g. high or medium"\
            + "\n  -b, --summary=SUMMARY          brief overview of the issue")
    elif specifier == "version":
        print(sys.argv[0], "version", _version)
        print("rabbit, named with bugs in mind. OH THE WIT!")


def main():
    """Main method to start the program"""
    b = BugTracker(_default_name)

    if len(sys.argv) < 2:
        b.display()
        sys.exit(0)

    for opt in sys.argv[1:]:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        if opt in ("-v", "--version"):
            usage("version")
            sys.exit(0)

    command = sys.argv[1].lower()

    try:
        if command == "add":
            b.add()
        elif command == "list":
            if len(sys.argv) >= 3:
                b.display(sys.argv[2])
            else:
                b.display()
        elif command == "open":
            b.open(sys.argv[2:])
        elif command == "close":
            b.close(sys.argv[2:])
        elif command == "detail":
            b.detail(sys.argv[2])
        elif command == "update":
            b.update(sys.argv[2], sys.argv[3:])
        elif command == "rm":
            b.remove(sys.argv[2])
        elif command == "help":
            if len(sys.argv) >= 3 and sys.argv[2].lower() in \
                ("add", "list", "update", "rm", "comment", "detail"):
                usage(sys.argv[2])
            else:
                usage()
        elif command == "comment":
            b.comment(sys.argv[2], sys.argv[3:])
        else: # displaying all issues otherwise isn't a bad idea.
            b.display()
    except IndexError:
        print("Missing or invalid arguments!")
        usage(command)

if __name__ == "__main__":
    main()
else:
    print("rabbit isn't really a library or anything, but whatever")
